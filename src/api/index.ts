/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Task Management API
 * API documentation for Task Management System
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type CarCardType = typeof CarCardType[keyof typeof CarCardType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CarCardType = {
  Sedan: 'Sedan',
  SUV: 'SUV',
  Convertible: 'Convertible',
  Hatchback: 'Hatchback',
} as const;

export type CarCardDetailsTransmission = typeof CarCardDetailsTransmission[keyof typeof CarCardDetailsTransmission];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CarCardDetailsTransmission = {
  Manual: 'Manual',
  Automatic: 'Automatic',
  'Semi-Automatic': 'Semi-Automatic',
  IMT: 'IMT',
} as const;

export type CarCardDetailsCapacity = typeof CarCardDetailsCapacity[keyof typeof CarCardDetailsCapacity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CarCardDetailsCapacity = {
  '2_People': '2 People',
  '4_People': '4 People',
  '7_People': '7 People',
} as const;

export type CarCardDetails = {
  transmission: CarCardDetailsTransmission;
  capacity: CarCardDetailsCapacity;
};

export interface CarCard {
  brand: string;
  type: CarCardType;
  /**
   * @minimum 0
   * @maximum 100000
   */
  price: number;
  currency: string;
  details: CarCardDetails;
}

export type EngineFuelType = typeof EngineFuelType[keyof typeof EngineFuelType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EngineFuelType = {
  electric: 'electric',
  diesel: 'diesel',
  hybrid: 'hybrid',
  petrol: 'petrol',
  GAS: 'GAS',
  hydrogen: 'hydrogen',
} as const;

export interface Engine {
  fuelType: EngineFuelType;
  /**
   * @minimum 0
   * @maximum 100
   */
  fuelcapacity: number;
  /**
   * @minimum 0.5
   * @maximum 6
   */
  capacity_liters: number;
  /**
   * @minimum 50
   * @maximum 2000
   */
  horsepower: number;
  /**
   * @minimum 4
   * @maximum 12
   */
  cylinders: number;
}

export interface CarFeatures {
  safety?: string[];
  infotainment?: string[];
  comfort?: string[];
  performance?: string[];
  exterior?: string[];
}

export interface Location {
  city: string;
  country: string;
}

export interface Color {
  exterior: string;
  interior: string;
}

export type CreateCarInputPerformance = {
  /** @minimum 0 */
  views?: number;
  /** @minimum 0 */
  likes?: number;
  /** @minimum 0 */
  clicks?: number;
};

export type CreateCarInputStatus = typeof CreateCarInputStatus[keyof typeof CreateCarInputStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCarInputStatus = {
  sold: 'sold',
  pending: 'pending',
  available: 'available',
} as const;

export interface CreateCarInput {
  id: string;
  manifacture: string;
  model: string;
  car_card: CarCard;
  /** @pattern ^\d{3}-\d{3}-\d{4}$ */
  phone: string;
  /**
   * @minimum 1000
   * @maximum 1000000
   */
  cost: number;
  description?: string;
  engine: Engine;
  liked?: boolean;
  /**
   * @minimum 500
   * @maximum 500000
   */
  mileage_km: number;
  posted_at: string;
  car_features: CarFeatures;
  location: Location;
  color: Color;
  performance?: CreateCarInputPerformance;
  status?: CreateCarInputStatus;
}

export type PostRegisterUserBody = {
  username: string;
  email: string;
  password: string;
};

export type PostLoginUserBody = {
  email: string;
  password: string;
};

export type PostLoginUser200UserData = {
  email?: string;
  id?: string;
  roles?: string[];
};

export type PostLoginUser200 = {
  jwtToken?: string;
  userData?: PostLoginUser200UserData;
};

export type PostRefreshSessionBody = {
  refresh_token: string;
};

export type PostRequestResetPasswordBody = {
  email: string;
};

export type PostVerifyResetPasswordBody = {
  resetCode: string;
};

export type PatchResetPasswordBody = {
  token: string;
  password: string;
  confirmPassword: string;
};

export type PatchChangePasswordBody = {
  oldPassword: string;
  password: string;
  confirmPassword: string;
};

/**
 * @summary Register a new user
 */
export const postRegisterUser = <TData = AxiosResponse<void>>(
    postRegisterUserBody: PostRegisterUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/register-user`,
      postRegisterUserBody,options
    );
  }

/**
 * @summary Login user
 */
export const postLoginUser = <TData = AxiosResponse<PostLoginUser200>>(
    postLoginUserBody: PostLoginUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/login-user`,
      postLoginUserBody,options
    );
  }

/**
 * @summary Refresh access token
 */
export const postRefreshSession = <TData = AxiosResponse<void>>(
    postRefreshSessionBody: PostRefreshSessionBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/refresh-session`,
      postRefreshSessionBody,options
    );
  }

/**
 * @summary Request password reset
 */
export const postRequestResetPassword = <TData = AxiosResponse<void>>(
    postRequestResetPasswordBody: PostRequestResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/request-reset-password`,
      postRequestResetPasswordBody,options
    );
  }

/**
 * @summary Verify reset password code
 */
export const postVerifyResetPassword = <TData = AxiosResponse<void>>(
    postVerifyResetPasswordBody: PostVerifyResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/verify-reset-password`,
      postVerifyResetPasswordBody,options
    );
  }

/**
 * @summary Reset password with token
 */
export const patchResetPassword = <TData = AxiosResponse<void>>(
    patchResetPasswordBody: PatchResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/reset-password`,
      patchResetPasswordBody,options
    );
  }

/**
 * @summary Change password (requires authentication)
 */
export const patchChangePassword = <TData = AxiosResponse<void>>(
    patchChangePasswordBody: PatchChangePasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/change-password`,
      patchChangePasswordBody,options
    );
  }

/**
 * @summary Create a new car
 */
export const postCars = <TData = AxiosResponse<Car>>(
    createCarInput: CreateCarInput, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/cars`,
      createCarInput,options
    );
  }

/**
 * @summary Get all cars
 */
export const getCars = <TData = AxiosResponse<Car[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/cars`,options
    );
  }

export type PostRegisterUserResult = AxiosResponse<void>
export type PostLoginUserResult = AxiosResponse<PostLoginUser200>
export type PostRefreshSessionResult = AxiosResponse<void>
export type PostRequestResetPasswordResult = AxiosResponse<void>
export type PostVerifyResetPasswordResult = AxiosResponse<void>
export type PatchResetPasswordResult = AxiosResponse<void>
export type PatchChangePasswordResult = AxiosResponse<void>
export type PostCarsResult = AxiosResponse<Car>
export type GetCarsResult = AxiosResponse<Car[]>
